# **Control Structures in R: Conditionals and Loops**

Control structures in R allow you to manipulate the flow of your programs, making them more flexible and dynamic. In this chapter, we'll focus on conditionals and loops, showing you how to implement decision-making and repetition in your R scripts.

## Conditionals

Conditionals in R let you execute different blocks of code based on specific conditions. The most common conditional structure is the "if-else" statement, but there are other variations as well.

### If-Else Statements

An "if-else" statement allows you to execute different code blocks depending on whether a condition is **`TRUE`** or **`FALSE`**. The general syntax is as follows:

```{r}
if (TRUE) {
  # code to execute if condition is TRUE
} else {
  # code to execute if condition is FALSE
}

```

Let's consider a simple example to illustrate the concept:

```{r}
x <- 10

if (x > 5) {
  print("x is greater than 5")
} else {
  print("x is less than or equal to 5")
}

```

In this example, the condition **`x > 5`** is evaluated. Since it's **`TRUE`**, the first block of code is executed, printing "x is greater than 5."

### Else IF Statements

You can use "else if" statements to check multiple conditions in sequence. This is useful when there are more than two possible outcomes.

```{r}
score <- 85

if (score >= 90) {
  print("Grade: A")
} else if (score >= 80) {
  print("Grade: B")
} else {
  print("Grade: C")
}

```

In this example, the "else if" statement allows us to assign grades based on a range of scores. If the first condition isn't met, the next one is checked, and so on, until a condition is **`TRUE`** or the "else" block is executed.

### Nested IF statements

You can also nest "if" statements within other "if" statements to create more complex decision-making logic.

```{r}
age <- 18
has_id <- TRUE

if (age >= 18) {
  if (has_id) {
    print("Allowed to enter")
  } else {
    print("ID required")
  }
} else {
  print("Not allowed to enter")
}

```

In this example, the outer "if" checks if the person is 18 or older. If true, the nested "if" checks if they have a valid ID. This kind of nesting is useful when you need to apply additional conditions within a broader context.

### Switch Statements

A "switch" statement allows you to execute different code blocks based on the value of a variable. This is similar to "if-else" but often more readable when dealing with multiple cases.

```{r}
day <- "Tuesday"

switch(day,
  "Monday" = print("Start of the workweek"),
  "Friday" = print("End of the workweek"),
  "Saturday" = print("Weekend!"),
  "Sunday" = print("Weekend!"),
  print("A regular weekday")
)

```

In this example, the **`switch()`** function selects a code block to execute based on the value of **`day`**. If the value doesn't match any specified cases, the default code block is executed (the last statement without a named case).

## Loops

Loops are a fundamental concept in programming, allowing you to repeat code blocks multiple times. In R, loops come in various forms, including "for," "while," and "repeat" loops. Let's explore these in detail.

### For Loops

A "for" loop iterates over a sequence, executing a code block for each element. This is useful when you know the exact number of iterations.

```{r}
# Iterate over a vector
vec <- c(1, 2, 3, 4, 5)

for (i in vec) {
  print(paste("Value:", i))
}

```

In this example, the loop iterates over the vector **`vec`**, printing each value with a prefix "Value:". You can also use "for" loops with other sequences, such as character vectors or list indices.

```{r}
# Iterate over the names of a data frame
df <- data.frame(Name = c("Alice", "Bob", "Charlie"), Age = c(25, 30, 35))

for (name in names(df)) {
  print(paste("Column:", name))
}

```

Here, the loop iterates over the column names of a data frame, printing the column names one by one.

### While Loops

A "while" loop continues to execute as long as a specified condition is **`TRUE`**. This is useful when the number of iterations is unknown or dependent on some condition.

```{r}
# Example of a simple while loop
counter <- 1

while (counter <= 5) {
  print(paste("Counter:", counter))
  counter <- counter + 1
}

```

In this example, the loop continues as long as **`counter <= 5`**. Once the condition is **`FALSE`**, the loop terminates.

### Repeat Loops

A "repeat" loop is similar to a "while" loop, but it doesn't require a condition to start. It continues until an explicit **`break`** statement is encountered.

```{r}
# Example of a repeat loop with a break condition
x <- 0

repeat {
  x <- x + 1
  if (x >= 5) {
    break
  }
  print(paste("x is:", x))
}

```

In this example, the loop continues indefinitely until the condition **`x >= 5`** is met, at which point the **`break`** statement stops the loop.

### Nested Loops

You can nest loops within other loops to handle more complex tasks. This is useful for working with multi-dimensional data, such as matrices or data frames.

```{r}
# Example of nested loops to iterate over a matrix
matrix <- matrix(1:9, nrow = 3, ncol = 3)

for (i in 1:nrow(matrix)) {
  for (j in 1:ncol(matrix)) {
    print(paste("Element at (", i, ",", j, ") is", matrix[i, j]))
  }
}

```

In this example, nested loops are used to iterate over the rows and columns of a matrix, printing each element with its coordinates.

## Loop Control Statements

In addition to **`break`**, R provides **`next`** to skip an iteration and continue with the next one, and **`return`** to exit a loop and return a value (in functions).

```{r}
# Example of using 'next' to skip even numbers
for (i in 1:10) {
  if (i %% 2 == 0) {  # Check if even
    next  # Skip even numbers
  }
  print(i)  # Print odd numbers
}

```

Here, the **`next`** statement is used to skip even numbers, resulting in only odd numbers being printed.

### Things to Consider While using Loops in R

1.  Loop Termination

    Ensure that loops have clear termination conditions to avoid infinite loops. This can happen in `while` or `repeat` loops where the exit condition might not be properly defined or achieved.

    ```{r}
    # Example of a safe loop with clear termination
    counter <- 1
    while (counter <= 10) {
      print(counter)
      counter <- counter + 1  # Ensures the loop will eventually end
    }

    ```

Ensure that `for` loops have a well-defined sequence and dont need exceed the intended iteration bounds.

2.  Efficiency

    Loops can be less efficient compared to vectorized operations in R. Consider vectorized approaches when possible to improve performance.

    ```{r}
    # Inefficient loop-based approach to add two vectors
    vec1 <- c(1, 2, 3, 4, 5)
    vec2 <- c(6, 7, 8, 9, 10)

    result <- c()
    for (i in 1:length(vec1)) {
      result[i] <- vec1[i] + vec2[i]
    }

    # Efficient vectorized approach
    result <- vec1 + vec2

    ```

In this example, the second approach is faster because it leverages R's Vectorized operations, which are optimized for performance.

3.  Loop Scope and Variable Reuse

    Consider the scope of variables within loops and avoid variable reuse when it may cause confusion or errors.

    ```{r}
    # Correct scope and variable reuse
    for (i in 1:5) {
      temp <- i * 2
      print(temp)
    }

    # Potential variable conflict
    temp <- 10
    for (i in 1:5) {
      temp <- i * 2  # Reuses the 'temp' variable, which may cause conflicts
    }

    ```

Using unique variable names within loops helps avoid accidental overwriting of external variables.

4.  Avoiding Side effects

    Loops can sometimes cause unintended side effects, especially when modifying global variables or external data structures. To avoid this, ensure that loop operations are confined to local scope when possible.

    ```{r}
    # Correct: Loop works with local variables
    result <- c()
    for (i in 1:5) {
      local_result <- i * 2
      result <- c(result, local_result)
    }

    # Incorrect: Loop alters global variable unintentionally
    global_var <- 10
    for (i in 1:5) {
      global_var <- global_var + i  # Modifies a global variable in the loop
    }

    ```

In the second example, Modifying `global_var` inside the loop can lead to unintended consequences outside the loop.

5.  Loop Control Statements.

    Use `break` , `next`, and `return` carefully to control the flow within loops. These statements should be used with clear logic to avoid unexpected loop termination or skipping.

```{r}
# Correct use of break and next
for (i in 1:10) {
  if (i == 5) {
    break  # Exit the loop when i equals 5
  }
  if (i %% 2 == 0) {
    next  # Skip even numbers
  }
  print(i)
}

```

6.  Readability and Maintainability

    Write loops in a way that's easy to understand and maintain . This includes adding comments, using clear variable names, and avoiding overly complex nested loops.

    ```{r}
    # Readable loop with comments and clear variable names
    for (number in 1:10) {
      if (number %% 2 == 0) {
        next  # Skip even numbers
      }
      print(paste("Odd number:", number))
    }

    ```
