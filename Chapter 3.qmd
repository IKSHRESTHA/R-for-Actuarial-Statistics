# Basic Data Types and Data Structures in R

### Introduction to Data type

Data types are foundational in any programming language, and R is no exception. Understanding data types allows you to work with data efficiently, ensuring that your code behaves as expected. In R, data types refer to the kind of data a variable or object holds. Let's explore the common data types in R and why it's essential to know about them.

#### **Why Data Types Matter**

Data types define the operations and functions you can perform on a given object. For example, you can perform arithmetic on numeric types but not on character types. Knowing the data type of a variable helps you avoid errors and choose appropriate methods to manipulate data.

#### **Common Data Types in R**

R has several fundamental data types that you will encounter frequently:

-   **Numeric**: This data type represents numbers, including integers and floating-point numbers. Examples include 42, -3.14, and 1000.5.

-   **Character**: Character data types represent text or string data. They are enclosed in quotes, such as **`"Hello, world!"`** or **`'R programming'`**.

-   **Logical**: The logical data type has only two possible values: **`TRUE`** or **`FALSE`**. It is often used in conditionals and logical operations.

-   **Factor**: Factors represent categorical data, which can have a fixed number of unique values (called levels). Factors are useful for statistical analysis and plotting.

-   **Date and Date-Time**: R has specific data types for representing dates and date-time values. The **`Date`** type stores calendar dates, while **`POSIXct`** and **`POSIXlt`** represent date-time values with timestamps.

### Working with Data Types

To understand the data type of a variable in R, you can use functions like **`class()`** and **`typeof()`**. These functions help you identify what type of data you're working with, allowing you to make appropriate operations and conversions.

-   **Class and Typeof**: The **`class()`** function reveals the class of an object, while **`typeof()`** shows the internal storage mode of the data. These functions are helpful when debugging or when you need to determine a variable's type.

### Type Conversion

In R, you often work with multiple data types, sometimes needing to convert one type into another. This process, called type conversion, allows you to perform operations that are specific to certain data types, like arithmetic operations on numeric types or string manipulations on character types.

#### **Implicit Type Conversion**

R has a built-in mechanism for converting data types implicitly, especially when mixing data types in operations. For example, if you add a number to a character, R converts the character to a numeric value (if possible) before performing the operation. This can be helpful but sometimes leads to unexpected behavior if you don't expect it.

```{r}
#result <- 5 + "10"  # "10" is converted to numeric, and the result is 15

```

However, implicit conversion can raise errors if the conversion isn't possible.

#### **Explicit Type Conversion**

Explicit type conversion is when you manually convert a variable from one type to another. This approach provides more control and reduces the risk of unintended conversions. R offers several functions for explicit type conversion:

-   **Converting to Numeric**: To convert a character or logical variable to numeric, you can use the **`as.numeric()`** function. This is useful when you need to perform arithmetic on a variable.

    ```{r}
    char_num <- "42"
    converted_num <- as.numeric(char_num)  # Converts "42" to numeric 42

    ```

-   **Converting to Character**: To convert numeric or logical variables to character, use the **`as.character()`** function. This is helpful when creating labels or generating text output.

    ```{r}
    num_var <- 123
    char_var <- as.character(num_var)  # Converts 123 to "123"

    ```

-   **Converting to Logical**: The **`as.logical()`** function converts numeric or character variables to logical values. Numeric values other than zero are **`TRUE`**, while zero is **`FALSE`**. Character strings "TRUE" and "FALSE" convert to their corresponding logical values.

    ```{r}
    num_var <- 1
    logical_var <- as.logical(num_var)  # Converts 1 to TRUE

    char_var <- "TRUE"
    logical_var <- as.logical(char_var)  # Converts "TRUE" to TRUE

    ```

-   **Converting to Factor**: To convert character variables into factors, use the **`as.factor()`** function. Factors are useful when working with categorical data.

    ```{r}
    char_var <- "apple"
    factor_var <- as.factor(char_var)  # Converts "apple" to a factor with one level: "apple"

    ```

-   **Converting to Date**: R offers functions to convert character data into dates. The **`as.Date()`** function is used for date-only data, while **`as.POSIXct()`** and **`as.POSIXlt()`** are used for date-time data.

    ```{r}
    date_str <- "2024-04-20"
    date_var <- as.Date(date_str)  # Converts "2024-04-20" to a date object

    ```

### Introduction to Data Structures

Data structures are the building blocks for organizing, storing, and manipulating data in R. Understanding the variety of data structures available in R is essential for effective data analysis and programming. In this section, we will explore the most common data structures in R and their key characteristics.

#### **Why Data Structures Matter**

Data structures determine how you can access, manipulate, and store data. The choice of data structure can affect performance, flexibility, and ease of use. Knowing when to use a specific data structure helps you write efficient and maintainable R code.

#### **Common Data Structures in R**

R offers a range of data structures to suit different types of data and analysis requirements. Here are some of the most commonly used ones:

-   **Vectors**: Vectors are the most basic data structure in R, representing a one-dimensional array of elements. Vectors can contain numeric, character, or logical values. They are the building blocks for more complex structures.

-   **Matrices**: Matrices are two-dimensional arrays with rows and columns. They are useful for mathematical operations and can contain numeric or character data.

-   **Data Frames**: Data frames are tabular data structures, resembling spreadsheets or SQL tables. They consist of rows and columns, with each column potentially having a different data type. Data frames are commonly used in data analysis and statistical modeling.

-   **Lists**: Lists are versatile data structures that can hold a collection of different data types, including vectors, matrices, data frames, and even other lists. Lists are useful for storing complex or nested data.

-   **Factors**: Factors represent categorical data with a fixed number of levels. They are useful for statistical analysis and creating plots with specific categories.

#### **When to Use Different Data Structures**

Choosing the right data structure depends on your data and what you need to do with it. Here are some guidelines for selecting the appropriate data structure:

-   Use **vectors** when you need a simple one-dimensional array for calculations or operations.

-   Use **matrices** for two-dimensional data that require matrix-based operations.

-   Use **data frames** for tabular data where you need to manipulate columns or work with data sets.

-   Use **lists** when you need a flexible structure that can hold mixed data types or complex/nested data.

-   Use **factors** for categorical data where specific levels are important.

### Vectors

#### Creating Vectors

Vectors are versatile and can hold numeric, character, or logical data. You can create vectors in several ways:

-   **Using `c()`**: The **`c()`** function (short for "combine" or "concatenate") is the most common method to create vectors. It allows you to combine individual elements or other vectors into a single vector.

    ```{r}
    numeric_vector <- c(1, 2, 3, 4, 5)
    char_vector <- c("apple", "banana", "cherry")
    logical_vector <- c(TRUE, FALSE, TRUE)

    ```

This method is suitable for creating vectors from known values or combining existing vectors.

-   **Using `seq()`**: The **`seq()`** function creates a sequence of numbers. It is ideal when you need vectors with a specific range, interval, or length.

    ```{r}
    sequence_vector <- seq(1, 10, by = 2)  # Creates a vector [1, 3, 5, 7, 9]

    ```

Use this method when you need vectors with regular sequences or patterns.

-   **Using `rep()`**: The **`rep()`** function creates a vector by repeating a value or pattern a specified number of times.

    ```{r}
    repeated_vector <- rep(3, 5)  # Creates a vector [3, 3, 3, 3, 3]

    ```

This method is useful when you need vectors with repeated values.

-   **Using `:` Operator**: The colon operator creates a sequence of numbers from a start to an end value.

    ```{r}
    colon_vector <- 1:5  # Creates a vector [1, 2, 3, 4, 5]

    ```

Use this method for simple sequences with consecutive numbers.

#### **Operations with Vectors**

Vectors support a wide range of operations, allowing you to manipulate and transform data efficiently. Here are some common operations:

-   **Arithmetic Operations**: You can perform arithmetic operations on numeric vectors, such as addition, subtraction, multiplication, and division.

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)

# Element-wise operations
sum_vector <- vector1 + vector2  # [5, 7, 9]

```

-   **Logical Operations**: Logical vectors can be used for comparison and conditional operations.

    ```{r}
    vector1 <- c(1, 2, 3)
    vector2 <- c(3, 2, 1)

    # Logical comparisons
    equal_vector <- vector1 == vector2  # [FALSE, TRUE, FALSE]

    ```

<!-- -->

-   **Indexing and Slicing**: You can access specific elements in a vector using indexing. This allows you to extract subsets of a vector.

    ```{r}
    vector <- c(10, 20, 30, 40, 50)

    # Indexing to get the second element
    second_element <- vector[2]  # 20

    # Slicing to get a subset of elements
    subset_vector <- vector[1:3]  # [10, 20, 30]

    ```

<!-- -->

-   **Combining Vectors**: Vectors can be combined using **`c()`** or concatenated using **`append()`**.

    ```{r}
    vector1 <- c(1, 2, 3)
    vector2 <- c(4, 5, 6)

    combined_vector <- c(vector1, vector2)  # [1, 2, 3, 4, 5, 6]

    ```

#### **Operations with Vectors of Different Lengths**

#### **Recycling in R**

When you add, subtract, or perform other operations on vectors of unequal lengths, R uses a process called "recycling." Recycling involves reusing elements from the shorter vector to match the length of the longer vector. This behavior is useful but can lead to unintentional errors if not managed properly.

-   **Adding Vectors of Different Lengths**: If you add two vectors of unequal lengths, R recycles the shorter vector to match the length of the longer one.

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(10, 20)

# Recycling happens here
result <- vector1 + vector2  # [11, 22, 13]

```

In the above example, **`vector2`** is shorter, so its elements are recycled to match the length of **`vector1`**. This leads to **`10`** and **`20`** being reused, resulting in **`[11, 22, 13]`**.

-   **Subtraction with Vectors of Different Lengths**: Recycling also applies when subtracting vectors of unequal lengths.

```{r}
vector1 <- c(100, 200, 300)
vector2 <- c(10, 20)

# Recycling results in
result <- vector1 - vector2  # [90, 180, 290]

```

Similarly, **`vector2`** is recycled to match the length of **`vector1`**, leading to **`10`** and **`20`** being reused.

#### **Avoiding Recycling Errors**

While recycling can be useful, it's essential to be aware of potential errors when vectors have lengths that don't divide evenly. If the shorter vector's length doesn't align with the longer vector, R will issue a warning, indicating the recycling pattern might be incorrect.

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(10, 20, 30, 40)

result <- vector1 + vector2  # [11, 22, 33, 41]
# Warning message: longer object length is not a multiple of shorter object length

```

In this case, the warning indicates that the recycling might lead to unexpected results. To avoid such issues, ensure vectors have lengths that divide evenly or explicitly align their lengths.

#### **Filtering Vectors**

Filtering vectors is a common operation where you select elements based on specific conditions or criteria. This is useful when you need to extract a subset of data from a larger vector.

-   **Logical Filtering**: You can create logical vectors with **`TRUE`** or **`FALSE`** values to select elements from another vector.

```{r}
numbers <- c(1, 2, 3, 4, 5, 6)

# Create a logical vector to filter even numbers
is_even <- numbers %% 2 == 0

# Use the logical vector to filter
even_numbers <- numbers[is_even]  # [2, 4, 6]

```

In this example, **`is_even`** is a logical vector indicating which elements are even numbers. By using this logical vector to index **`numbers`**, you can extract the even numbers.

-   **Subsetting with Conditions**: You can also filter vectors based on conditions.

    ```{r}
    ages <- c(15, 25, 35, 45, 55)

    # Select ages greater than or equal to 35
    adults <- ages[ages >= 35]  # [35, 45, 55]

    ```

Here, the condition **`ages >= 35`** creates a logical vector used to filter the **`ages`** vector, resulting in a subset of adults.

### Matrices

#### **Introduction to Matrices**

A matrix is a two-dimensional data structure with rows and columns. Matrices can contain numeric, character, or logical data. Most commonly, they are used for numeric computations, linear algebra, and data analysis.

#### **Creating Matrices**

To create a matrix, you must specify the data, the number of rows, and the number of columns. The total number of elements must be a multiple of the product of rows and columns; otherwise, R may throw an error or recycle elements unexpectedly.

##### **Using `matrix()`**

The **`matrix()`** function creates a matrix from a vector, given a specified number of rows and columns. It's important to ensure that the total number of elements is appropriate for the desired matrix structure.

```{r}
# Creating a 2x3 matrix with dimension names
data <- 1:6
mat <- matrix(data, nrow = 2, ncol = 3)

# Naming the rows and columns
rownames(mat) <- c("Row1", "Row2")
colnames(mat) <- c("Col1", "Col2", "Col3")

# The matrix with dimension names:
#     Col1 Col2 Col3
# Row1    1    3    5
# Row2    2    4    6


```

This example creates a 2x3 matrix and names the rows and columns. Dimension names are helpful for data referencing and indexing.

##### **Character Matrix**

Character matrices are created similarly to numeric matrices, but they contain text data.

```{r}
# Creating a 2x3 character matrix
char_data <- c("A", "B", "C", "D", "E", "F")
char_mat <- matrix(char_data, nrow = 2, ncol = 3)

# Naming the rows and columns
rownames(char_mat) <- c("Row1", "Row2")
colnames(char_mat) <- c("Col1", "Col2", "Col3")

# The character matrix with dimension names:
#     Col1 Col2 Col3
# Row1    A    C    E
# Row2    B    D    F

```

If the number of elements doesn't align with the specified rows and columns, R will issue a warning or error. Here's an example of incorrect matrix creation:

```{r}
# Attempting to create a 2x3 matrix with only 5 elements
mat <- matrix(1:5, nrow = 2, ncol = 3)  
# This leads to a warning:
# Warning message: data length [5] is not a sub-multiple or multiple of the number of rows [2]

```

In this case, R attempts to recycle the elements to fill the matrix, but the recycling is not a proper multiple, leading to a warning. The recycling can result in unexpected behavior if the data structure isn't consistent.

##### **Using `cbind()` and `rbind()`**

These functions combine existing vectors into a matrix. Again, it's crucial to ensure the number of elements aligns with the desired matrix dimensions.

```{r}
# Correctly combining two 2-element vectors into a 2x2 matrix
col1 <- c(1, 2)
col2 <- c(3, 4)
mat <- cbind(col1, col2)  # [1, 3] and [2, 4]

# Correctly combining two 3-element vectors into a 2x3 matrix
row1 <- c(1, 2, 3)
row2 <- c(4, 5, 6)
mat <- rbind(row1, row2)  # [1, 2, 3] and [4, 5, 6]

```

However, if the combined vectors don't match the required dimensions, recycling or errors may occur.

```{r}
# Incorrectly combining two vectors of unequal lengths into a matrix
col1 <- c(1, 2)
col2 <- c(3, 4, 5)
mat <- cbind(col1, col2)  # Warning due to different lengths

```

In this case, the second vector has more elements than the first, leading to recycling or a warning.

#### Matrix Operation

##### **Addition and Subtraction**

Matrix addition and subtraction are element-wise operations, meaning corresponding elements are added or subtracted.

```{r}
m1 <- matrix(1:4, nrow = 2, ncol = 2)
m2 <- matrix(5:8, nrow = 2, ncol = 2)

# Addition
m_add <- m1 + m2

# Subtraction
m_sub <- m1 - m2

print(m_add)
print(m_sub)

```

##### Scalar Multiplication

Scalar multiplication multiplies each element in a matrix by a scalar (a single number).

```{r}
scalar <- 3
m_scalar_mult <- scalar * m1
print(m_scalar_mult)

```

##### Matrix Multiplication

Matrix multiplication requires that the number of columns in the first matrix equals the number of rows in the second matrix.

```{r}
m3 <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
m4 <- matrix(c(7, 8, 9, 10, 11, 12), nrow = 3, ncol = 2)

m_mult <- m3 %*% m4
print(m_mult)

```

##### Transposition

Transposing a matrix flips rows and columns.

```{r}
m_transpose <- t(m1)
print(m_transpose)

```

##### Matrix Inversion

The inverse of a matrix **`A`** is a matrix **`B`** such that **`A %*% B = I`**, where **`I`** is the identity matrix.

```{r}
m_invertible <- matrix(c(4, 7, 2, 6), nrow = 2, ncol = 2)
m_inverse <- solve(m_invertible)
print(m_inverse)

```

##### Determinant

The determinant is a scalar value that can be computed from a square matrix.

```{r}
det_val <- det(m_invertible)
print(det_val)

```

##### Eigenvalues and Eigenvectors

Eigenvalues and eigenvectors are used in many applications, including principal component analysis.

```{r}
eigen_result <- eigen(m_invertible)
print(eigen_result$values)  # Eigenvalues
print(eigen_result$vectors)  # Eigenvectors

```

### Data Frames

Data frames are a key structure in R, designed to hold tabular data. Each column in a data frame can contain different data types, such as numeric, character, or factor. This chapter explores various ways to create data frames, common operations, and a few advanced techniques.

Data frames are similar to tables in relational databases or Excel spreadsheets. Each row represents an observation, and each column represents a variable.

### **Creating a Data Frame from Vectors**

One of the most straightforward ways to create a data frame is from vectors. You can use the **`data.frame()`** function to combine multiple vectors into a data frame.

```{r}
# Create individual vectors
names <- c("Alice", "Bob", "Charlie")
ages <- c(25, 30, 35)
salaries <- c(50000, 60000, 70000)

# Create a data frame
df <- data.frame(Name = names, Age = ages, Salary = salaries)
print(df)

```

#### Basic Data Frame Operations

Data frames support common operations like adding rows and columns, selecting subsets of data, and modifying values.

### **Adding Columns**

You can add columns to an existing data frame by assigning a new variable to it.

```{r}
df$Location <- c("New York", "Los Angeles", "Chicago")
print(df)

```

### **Adding Rows**

To add rows, you can use **`rbind()`**, which concatenates data frames by rows.

```{r}
new_row <- data.frame(
  Name = "David",
  Age = 40,
  Salary = 80000,
  Location = "San Francisco"
)

df <- rbind(df, new_row)
print(df)

```

### **Selecting Data**

You can select subsets of data using indexing, conditions, or specific functions like **`subset()`**.

```{r}
# Select a single column
print(df$Name)

# Select multiple columns
print(df[, c("Name", "Age")])

# Select rows based on conditions
df_older_than_30 <- subset(df, Age > 30)
print(df_older_than_30)

```

### **Modifying Values**

To update values in a data frame, you can use indexing and assignment.

```{r}
# Update a specific value
df$Salary[df$Name == "Alice"] <- 55000
print(df)

# Update multiple values with conditions
df$Location[df$Department == "HR"] <- "Boston"
print(df)

```

### Advanced Data Frame Operations

### **Merging Data Frames**

To merge or join data frames, you can use the **`merge()`** function, specifying the common columns for joining.

```{r}
df2 <- data.frame(
  Name = c("Alice", "Charlie", "David"),
  Project = c("Alpha", "Beta", "Gamma")
)

# Merge data frames on the 'Name' column
df_merged <- merge(df, df2, by = "Name")
print(df_merged)

```

### **Applying Functions to Data Frames**

Functions can be applied to rows or columns of a data frame using **`apply()`**, **`lapply()`**, or **`sapply()`**.

```{r}
# Find the mean salary
mean_salary <- mean(df$Salary)
print(mean_salary)

# Apply a function to each row
row_summary <- apply(df[, -1], 1, function(x) sum(as.numeric(x[2:3])))  # Exclude Name
print(row_summary)

```

### **Lists in R**

Lists in R are one of the most flexible data structures, allowing you to store different types of objects within a single list. In this chapter, we'll cover the basics of lists, ways to create them, and operations to access, modify, and manipulate their elements.

A list in R is a collection of objects that can be of varying types and lengths. You can store vectors, data frames, matrices, functions, or even other lists within a list.

### **Creating a List**

To create a list in R, you use the **`list()`** function, passing in the objects you want to include in the list.

```{r}
# Create a simple list with different types of objects
my_list <- list(
  numbers = c(1, 2, 3, 4, 5),
  letters = c("a", "b", "c"),
  matrix = matrix(1:9, nrow = 3),
  df = data.frame(Name = c("Alice", "Bob"), Age = c(25, 30))
)

print(my_list)

```

In this example, **`my_list`** contains a numeric vector, a character vector, a matrix, and a data frame.

### **Named Lists**

You can create lists with named elements for easier access.

```{r}
# Create a named list
named_list <- list(
  Name = "John",
  Age = 40,
  Salary = 60000
)

print(named_list)

```

### **Accessing List Elements**

You can access elements in a list by index or by name. R allows for flexible methods to extract data from lists.

### **Index-based Access**

Use double square brackets **`[[ ]]`** to access elements by index. Single square brackets **`[ ]`** return a subset of the list as another list.

```{r}
# Access the first element (numeric vector)
first_element <- my_list[[1]]
print(first_element)

# Access the first two elements as a sublist
subset_list <- my_list[1:2]
print(subset_list)

```

### **Name-based Access**

When lists have named elements, you can access them using the element's name.

```{r}
# Access the 'letters' element
letters_element <- my_list$letters
print(letters_element)

# Alternatively, using double square brackets with the name
letters_element2 <- my_list[["letters"]]
print(letters_element2)

```

### **Modifying List Elements**

Lists in R are mutable, meaning you can change their elements, add new ones, or remove them.

### **Changing Existing Elements**

You can replace existing elements by assigning new values to them.

```{r}
# Change the first element to a new vector
my_list[[1]] <- c(10, 20, 30)
print(my_list)

# Change a named element
my_list$letters <- c("x", "y", "z")
print(my_list)

```

### **Adding New Elements**

You can add new elements to a list by assigning them with a new index or name.

```{r}
# Add a new element with a named index
my_list$new_element <- "Hello, R!"
print(my_list)

# Add a new element with a numerical index
my_list[[6]] <- c("extra", "items")
print(my_list)

```

### **Removing Elements**

To remove elements from a list, you can use **`NULL`** or the **`-`** operator with the index.

```{r}
# Remove the third element
my_list[[3]] <- NULL
print(my_list)

# Remove the first element
my_list <- my_list[-1]
print(my_list)

```
